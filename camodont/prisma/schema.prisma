// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EstadoCita {
  PENDIENTE
  CANCELADO
  REALIZADO
}
enum EstadoCampana {
  ACTIVO
  INACTIVO
}



model Campana {
  id     Int       @id @default(autoincrement())
  external_id String @default(uuid())
  nombre String
  fechaInicio DateTime
  fechaFin DateTime
  estado EstadoCampana
  numeroVacantes Int
  PeriodoAcademico PeriodoAcademico @relation(fields: [idPeriodoAcademico], references: [id])
  idPeriodoAcademico Int
  Cita Cita[]
  Servicio Servicio[] @relation("CampanaServicio")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UsuarioCampana UsuarioCampana[]
}

model Cita {
  id     Int       @id @default(autoincrement())
  external_id String @default(uuid())
  fecha  DateTime
  hora   DateTime
  lugar  String
  estado EstadoCita
  Campana Campana @relation(fields: [idCampana], references: [id])
  idCampana Int
  Servicio Servicio @relation(fields: [idServicio], references: [id])
  idServicio Int @unique
  Usuario Usuario @relation(fields: [idUsuario], references: [id])
  idUsuario Int
  Tratamiento Tratamiento @relation(fields: [idTratamiento], references: [id])
  idTratamiento Int
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Servicio {
  id     Int       @id @default(autoincrement())
  nombre String
  descripcion String?
  duracion Int
  Cita Cita?
  Campana Campana[] @relation("CampanaServicio")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model PeriodoAcademico {
  id     Int       @id @default(autoincrement())
  fechaInicio DateTime
  fechaFin DateTime
  Campana Campana[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rol {
  id     Int       @id @default(autoincrement())
  nombre String
  Usuario Usuario[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Usuario {
  id     Int       @id @default(autoincrement())
  external_id String  @default(uuid())
  rol Rol @relation(fields: [idRol], references: [id])
  idRol Int
  nombre String
  apellido String
  correo String
  clave String
  telefono String?
  foto String?
  direccion String?
  cicloAcademico String?
  Cita Cita[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UsuarioCampana UsuarioCampana[]

}

model UsuarioCampana {
  id     Int       @id @default(autoincrement())
  Usuario Usuario @relation(fields: [idUsuario], references: [id])
  idUsuario Int
  Campana Campana @relation(fields: [idCampana], references: [id])
  idCampana Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}




model Tratamiento {
  id     Int       @id @default(autoincrement())
  external_id String  @default(uuid())
  descripcion String
  fecha DateTime
  duracion Int
  Cita Cita[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

